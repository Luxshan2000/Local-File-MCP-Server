# FastMCP File Server Configuration
# Copy this file to .env and update with your settings

# ===================================
# REQUIRED CONFIGURATION
# ===================================

# Safe directory for file operations (REQUIRED)
# All file operations will be restricted to this directory and its subdirectories
# Use absolute paths for best compatibility
MCP_ALLOWED_PATH=/absolute/path/to/your/files

# ===================================
# HTTP SERVER CONFIGURATION
# ===================================

# HTTP server port (default: 8082)
# Used when running in HTTP mode: fastmcp-file-server-http
MCP_HTTP_PORT=8082

# Authentication token for HTTP mode (optional but recommended)
# When set, all HTTP requests must include: Authorization: Bearer <token>
# When unset, server runs without authentication (local use only)
# Generate strong tokens: openssl rand -hex 32
MCP_ADMIN_KEY=your-secret-token-here

# ===================================
# SECURITY CONFIGURATION
# ===================================

# Maximum file size limit (default: 10MB)
# Prevents uploads of excessively large files
# Supported units: B, KB, MB, GB
MCP_MAX_FILE_SIZE=10MB

# Enable read-only mode (default: false)
# When true, only read operations are allowed
# Useful for secure environments or temporary access
MCP_READ_ONLY=false

# ===================================
# LOGGING CONFIGURATION
# ===================================

# Logging level (default: INFO)
# Options: DEBUG, INFO, WARNING, ERROR, CRITICAL
# Use DEBUG for development, INFO for production
MCP_LOG_LEVEL=INFO

# ===================================
# ADVANCED CONFIGURATION
# ===================================

# Allowed file extensions (optional)
# Comma-separated list of allowed file extensions
# When set, only files with these extensions can be created/modified
# Example: .txt,.py,.js,.json,.md
# MCP_ALLOWED_EXTENSIONS=

# Blocked file extensions (optional)
# Comma-separated list of blocked file extensions
# Files with these extensions cannot be created/modified
# Example: .exe,.bat,.sh,.ps1
# MCP_BLOCKED_EXTENSIONS=

# Maximum directory depth (optional)
# Limits how deep into subdirectories operations can go
# Default: unlimited (-1)
# MCP_MAX_DEPTH=-1

# Enable CORS for HTTP mode (default: true)
# Allow cross-origin requests for web-based AI systems
# MCP_ENABLE_CORS=true

# ===================================
# ENVIRONMENT-SPECIFIC EXAMPLES
# ===================================

# Development environment
# MCP_ALLOWED_PATH=/home/dev/projects/my-project
# MCP_HTTP_PORT=8082
# MCP_ADMIN_KEY=dev-token-123
# MCP_LOG_LEVEL=DEBUG

# Production environment
# MCP_ALLOWED_PATH=/var/app/data
# MCP_HTTP_PORT=8082
# MCP_ADMIN_KEY=prod-secure-token-xyz789
# MCP_MAX_FILE_SIZE=50MB
# MCP_LOG_LEVEL=INFO

# Secure/read-only environment
# MCP_ALLOWED_PATH=/var/app/readonly-data
# MCP_READ_ONLY=true
# MCP_LOG_LEVEL=WARNING

# ===================================
# TEMPORARY REMOTE ACCESS NOTES
# ===================================

# For temporary ngrok exposure:
# 1. Set a strong MCP_ADMIN_KEY
# 2. Start server: fastmcp-file-server-http
# 3. Expose: ngrok http $MCP_HTTP_PORT
# 4. Use ngrok URL with Authorization header
# 5. IMPORTANT: Unset MCP_ADMIN_KEY and restart when done

# For web-based AI systems (ChatGPT, etc.):
# - Use the ngrok HTTPS URL: https://abc123.ngrok.io/mcp
# - Include header: Authorization: Bearer your-secret-token
# - Monitor access logs carefully
# - Revoke access immediately after use